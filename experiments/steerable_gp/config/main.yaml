# @package _global_

defaults:
  # GENERAL #
  - _self_

  - server: base
  - logger: csv

  - net: mattn
  - lr_schedule: rcosine
  - beta_schedule: linear
  - kernel: whitevec
  - data: gp
  - data_kernel: divfree
  
  # enable color logging
  - override hydra/hydra_logging: default
  - override hydra/job_logging: default

name: steerable_gp
mode: train
seed: 0

beta_schedule:
  # t0: 3e-4
  t0: 5e-4
  t1: 1.0
  beta0: 1e-4
  beta1: 15.0

optim:
  batch_size: 32
  n_steps: 80_000
  lr: 5e-4
  learning_rate: ${optim.lr}
  ema_rate: 0.99

eval:
  batch_size: ${max:${eval:${optim.batch_size}//4},1}
  n_test: 1
  prior:
    n_steps: 100
    rtol: null
    atol: 1e-4
    prob_flow: false
  cond:
    lambda0: 1.
    psi: 1.
    tau: 0.5
    n_steps: 50
    n_inner_steps: 50
    prob_flow: false
  like:
    hutchinson_type: Rademacher # [None, Gaussian, Rademacher]
    n_steps: 100
    rtol: null
    atol: 1e-4
    n_hutchinson: 8


data:
  _convert_: all
  n_train: 80_000
  num_points: 30
  x_radius: 10
  kernel: ${data_kernel.cls}
  variance: 1.
  params:
    kernel:
      lengthscale: ${sqrt:5.}
      variance: ${data.variance}
    mean_function: {}
  mean_function:
    _target_: gpjax.Zero
    output_dim: 2
  obs_noise: 0.02
  seed_test: 1
  n_test: 10_000
  seed: 0
  min_context: 25
  max_context: ${data.min_context}
  n_points: [-1]

kernel:
  params:
    variance: 1.
    # variance: ${data.variance}
    lengthscale: 1.
  noise: .1

sde:
  _target_: neural_diffusion_processes.sde.SDE
  _convert_: object
  std_trick: false
  residual_trick: true
  limiting_kernel: ${kernel.cls}
  limiting_mean_fn:
    _target_: gpjax.Zero
    output_dim: 2
  exact_score: false

net:
  n_layers: 5
  hidden_dim: 128
  num_heads: 4

now: ${now:%Y-%m-%d}/${now:%H-%M-%S}

PROJECT_NAME: score-sde